import os
import cv2
import subprocess
from pathlib import Path
import argparse
import numpy as np

# --------- STEP 1: Standardize video ----------
def standardize_video(in_path: str, out_path: str, fps=30, width=1280):
    """
    Standardize video with ffmpeg: set FPS + resolution.
    """
    cmd = [
        "ffmpeg", "-y", "-i", in_path,
        "-vf", f"scale={width}:-2",  # resize width, keep aspect
        "-r", str(fps),              # force fps
        "-c:v", "libx264", "-preset", "veryfast", "-crf", "23",
        out_path
    ]
    subprocess.run(cmd, check=True)


# --------- STEP 2: Scene detection with OpenCV ----------
def detect_scenes_opencv(video_path, thresh=30.0, min_scene_len=15):
    """
    Detect scene boundaries using histogram difference in HSV color space.
    Returns list of (start_frame, end_frame).
    """
    cap = cv2.VideoCapture(video_path)
    prev_hist = None
    frame_num = 0
    scenes = []
    last_cut = 0

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
        hist = cv2.calcHist([hsv], [0, 1], None, [50, 60], [0, 180, 0, 256])
        cv2.normalize(hist, hist)

        if prev_hist is not None:
            score = cv2.compareHist(prev_hist, hist, cv2.HISTCMP_BHATTACHARYYA)
            # larger score = bigger difference
            if score > thresh / 100.0 and (frame_num - last_cut) > min_scene_len:
                scenes.append((last_cut, frame_num))
                last_cut = frame_num

        prev_hist = hist
        frame_num += 1

    scenes.append((last_cut, frame_num))  # add last scene
    cap.release()
    return scenes


# --------- STEP 3: Extract keyframes ----------
def extract_keyframes(video_path: str, out_dir: str, stride=30):
    """
    Extract keyframes every `stride` frames.
    """
    Path(out_dir).mkdir(parents=True, exist_ok=True)
    cap = cv2.VideoCapture(video_path)
    i = 0
    while True:
        ret, frame = cap.read()
        if not ret:
            break
        if i % stride == 0:
            cv2.imwrite(os.path.join(out_dir, f"frame_{i:06d}.jpg"), frame)
        i += 1
    cap.release()


# --------- MAIN ENTRYPOINT ----------
if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--video", required=True, help="Path to raw video")
    args = parser.parse_args()

    raw_video = args.video
    standardized = f"data/interim/{Path(raw_video).stem}_std.mp4"

    # 1. Standardize
    standardize_video(raw_video, standardized)

    # 2. Detect scenes
    scenes = detect_scenes_opencv(standardized, thresh=30.0)
    print("Detected scenes (frame ranges):", scenes)

    # 3. Extract frames
    extract_keyframes(standardized, f"data/interim/frames/{Path(raw_video).stem}")
